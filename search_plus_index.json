{"./":{"url":"./","title":"About","keywords":"","body":"LoranceChen's GitBook lorancechen.gitBook.aim = take notes & share programming skills. By LoranceChen，使用知识共享 署名-相同方式共享 4.0协议发布 皖ICP备2021006543号-1            此页面修订于： 2021-05-14 01:39:03 "},"author.html":{"url":"author.html","title":"关于作者","keywords":"","body":"关于作者 lorancechen = Author lorancechen.email = lorance7016@163.com, lorancechen7016@gmail.com lorancechen.github = lorancechen lorancechen.skills = List(Scala, Java, Elixir, C/C++, Redis, ES, Spark, Bootstrap, Socket, Game Developer, ...) lorancechen.location = ShangHai lorancechen.workExp = 4 years, mainly as Web Backend Engineer By LoranceChen，使用知识共享 署名-相同方式共享 4.0协议发布 皖ICP备2021006543号-1            此页面修订于： 2021-05-14 01:39:03 "},"daily/2019-08/gitbook-in-github.html":{"url":"daily/2019-08/gitbook-in-github.html","title":"gitbook-in-github","keywords":"","body":"GitBook in Github GitBook用于文本类的文章写作，使用markdown语法进行编写。通过安装gitbook命令，将markdown文件生成为html的站点。Github中的每个用户可以设置托管一个静态站点，结合Github自带的Travis CI，可以配置成提交markdown文件的时候自动触发的生成静态文件更新站点。GitBook结合Github，可以完成编写markdown -> 提交到github -> 几分钟之后站点自动更新的效果。另外一个最大优势是这种发布方式是完全免费的！！ gitbook介绍 gitbook是一个命令行工具。按照上述介绍，该命令行工具可以生成静态站点，结合markdown的语法，很方便的用于电子写作。GitBook的托管网站https://www.gitbook.com/ 提供了丰富的功能和界面用于管理电子写作的整个流程。不过对于国内来说，该网站访问较慢，需要梯子才能流程使用相关功能。作为一家商业公司，gitbook.com也会有一些繁琐的收费策略，当然这些收费功能会让我们的gitbook易于使用，如果有需要可以尝试用一下。如果要求不高，使用gitbook命令行工具，可以自行搭建个人的站点，方式多种多样，这里介绍的是根据https://github.com/riskers/blog/issues/48 做的一个二次整理，感谢riskers的分享。希望这篇another tutorial可以帮你解决问题。 gitbook环境准备 安装gitbook命令行 gitbook基于node.js，首先需要安装npm，在MacOS中使用brew install安装npm 然后使用npm install gitbook。gitbook插件下载较慢时，可以通过修改国内的源提高速度，比如改为淘宝源：npm config set registry http://registry.npm.taobao.org/ 创建SUMMARY.md文件。在创建一个目录my_gitbook，在该目录下创建SUMMARY.md文件，用于描述整个电子书的目录。使用你喜欢的文本编辑工具，最好支持md的格式，编写SUMMARY.md的内容如下：# Summary * [About](README.md) 编写README.md。按照上述SUMMARY.md的介绍，我们需要定义一个README.md的文件，在SUMMARY.md的同级目录下创建README.md。内容如下：# My GitBook take notes & share programming skills. 生成静态html项目。在my_gitbook目录下，使用gitbook install更新依赖生成。使用gitbook serve在当前的_book下自动生成静态html文件。打开http://localhost:4000 会看到具体网站效果。 为gitbook添加插件。现在展示的内容应该比较单调，创建一个book.json文件，添加如下内容，为站点提供丰富的内容：{ \"title\": \"LoranceChen Blog\", \"author\": \"LoranceChen\", \"plugins\": [ \"-lunr\", \"-search\", \"search-pro\", \"-sharing\", \"github-buttons\", \"editlink\", \"-highlight\", \"prism\", \"bibtex-indexed-cite\", \"anchor-navigation-ex\", \"page-footer-ex\", \"splitter\", \"todo\", \"copy-code-button\", \"expandable-chapters-small\", \"donate\", \"expandable-chapters\" ], \"pluginsConfig\": { \"search-pro\": { \"cutWordLib\": \"nodejieba\", \"defineWord\" : [\"Gitbook Use\"] }, \"anchor-navigation-ex\": { \"showLevel\": false }, \"github-buttons\": { \"buttons\": [{ \"user\": \"lorancechen\", \"repo\": \"gitbook-source\", \"type\": \"star\", \"size\": \"small\", \"count\": true }] }, \"editlink\": { \"base\": \"https://github.com/lorancechen/gitbook-source/blob/master\", \"label\": \"Edit\", \"multilingual\": false }, \"prism\": { \"ignore\": [ \"mermaid\", \"eval-js\" ], \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ] }, \"page-footer-ex\": { \"copyright\": \"By [LoranceChen](https://github.com/LoranceChen)，使用[知识共享 署名-相同方式共享 4.0协议](https://creativecommons.org/licenses/by-sa/4.0/)发布\", \"markdown\": true, \"update_label\": \"此页面修订于：\", \"update_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"bibtex-indexed-cite\": { \"path\": \"/\" }, \"donate\": { \"wechat\": \"/image/wechatpay.jpeg\", \"alipay\": \"/image/alipay.jpeg\", \"title\": \"给UP主加个鸡腿~~\", \"button\": \"打赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } } 将其中的用户名修改为你自己的即可。插件的安装和配置是基于json格式，具体插件的配置方式可以自行查询资料详细了解。 重新生成html文件。使用gitbook install和gitbook serve重新生成站点，并在4000端口查看效果。 创建用于编写的markdown代码库 上面我们在my_gitbook目录下创建了基本的gitbook文件结构，这里来看下如果配置git，这里假设对git、github有基本的使用经验。 初始化git，并配置gitignore。使用git init初始化该目录，编辑.gitignore文件：node_modules _book 在github中新建一个gitbook-source的repo，并使用git remote add origin https://github.com/{username}/gitbook-source.git添加关联该repo。 使用git add .和git push origin master命令将该目录提交到github即可。 github的travis配置 目前配置了gitbook-source仓库，用于编写markdown文件。另外我们需要另外一个仓库用户托管生成的html静态文件。托管html的服务一般叫做Pages服务，除了github，笔者尝试了当前其他国内的托管平台，发现对Pages或者对后续Travis CI的的push功能支持有限。这里依然github的具体配置流程做了相关记录： 在github中创建名为{your username}.github.io的仓库，用于托管生成的静态html资源，该命名规范为github的Pages服务的要求。Pages服务在当前的github的使用master分支。 配置github Travis。因为配置大部分为页面操作，具体截图可以按照：https://github.com/riskers/blog/issues/48 中的Travis一节操作。细分一下操作： 生成github的授权token，配置token的权限。 给Travis授权。在Travis中关联gitbook-source代码库：https://github.com/marketplace/travis-ci。 配置github token，用于生成静态html站点后，push到github的代码库。 在my_gitbook中，创建.travis.yaml文件，内容参考如下：注意，yaml文件中的CNAME配置可以自定义域名，但要提前在域名提供商中做好CNAME的配置。 language: node_js node_js: - \"10\" cache: npm notifications: email: recipients: - xxxxx@xx.com # 设置通知邮件 on_success: change on_failure: always install: - npm install -g gitbook-cli - gitbook install script: - gitbook build after_script: - cd _book # echo \"gitbook.youdomain.com\" >> CNAME - git init - git remote add origin https://${REF} - git add . - git commit -m \"Updated By Travis-CI With Build $TRAVIS_BUILD_NUMBER For Github Pages\" - git push --force --quiet \"https://${TOKEN}@${REF}\" master:master branches: only: - master env: global: - REF=github.com/lorancechen/{your username}.github.io.git # 设置 github 地址 测试效果。提交代码后可以看到travis正在跑CI，过几分钟查看{your username}.github.io.git仓库，验证是否提交完成。github对静态资源的缓存为10分钟，过10分钟后访问该http地址，验证内容是否生效：http://{your username}.github.io 其他： 关于Travis CI，后续可以在https://travis-ci.com/ 用github账号登陆，查看项目的配置。 具体的配置，可以参考我的gitbook-source仓库：https://github.com/LoranceChen/gitbook-source 关于‘打赏’插件，在支付宝和微信中把指定了金额的收款二维码截图为jpg即可，然后配置在book.json中。 配置个人域名 上面travis中提到了，在.travis.yaml中添加echo \"gitbook.youdomain.com\" >> CNAME语句即可支持CNAME自定义域名的功能。github的Pages服务会读取代码仓库中的CNAME文件作为自定义的域名。 上传图片资源 html生成的静态资源可以引用gitbook-source中的相对路径，我们可以创建images目录来维护相关的图片资源。 创建image目录，添加my-image.jpg文件 在README.md中添加，![my-image](image/my-image.jpg) 即可看到效果。 Best Practice 关于这个流程的最佳实践，有如下几点： 该流程适合写博客文章等需要一定时间思考才能编写出来的流程，不适合简单的做todo list记录等临时的笔记需求。 编写文章时，先在本地打开gitbook serve，可以在本地实时预览效果，防止发布之后发现排版等问题。 总结 这里通过gitbook+github，实现了一个简单的个人文章展示平台。目前市面有很多博客平台，但都需要在各自平台上做内容编辑。类似于gitbook这种模式，更加尊重文章编辑本身，弱化了对编辑平台的依赖。期望后续各个博客平台能够支持gitbook，更好的把文章的编写交给作者自己，而平台自身也能更专注于展示内容。 By LoranceChen，使用知识共享 署名-相同方式共享 4.0协议发布 皖ICP备2021006543号-1            此页面修订于： 2021-05-14 01:39:03 "},"occupy/interview-tech.html":{"url":"occupy/interview-tech.html","title":"interview-tech","keywords":"","body":"面试整理 这篇文章主要整理一下最近这段时间面试的一些心得体会，主要结合当前所在的公司环境，以技术面试官的角度，尝试整理一些能够评估候选人能力的清单。 背景 目前所在的是一家传统金融公司，职位是web后端开发，主要技术栈是java系。参与面试3年左右的开发人员，该职位薪资福利比不上一线公司的水平，但超过大多数中小型的互联网创业公司。公司内部各个部门职责分明，功能的开发和评估需要由专门的团队评审之后才能继续进行下去，日常工作主要是围绕实现业务提出的需求，除了编码之外，也需要通过邮件、电话和各个专业团队沟通问题。在这样的环境下招聘时评估的内容跟互联网面试方式不能直接拿来用，根据近半年陆陆续续的尝试，不断调整了面试内容和方式。 基本要求是确保候选人能够快速融入团队 对于业务强相关的技术部门来说，基本要求是能完成业务部门提出的需求正常评估工作量按时完成，并保证代码质量。这一点不光是技术过硬就能保障，还需要根据当前公司、部门的组织形式熟悉相关的流程和业务背景。 那么面试的考察点就明确了：确保候选人能够在已有的知识体系下，快速融入团队——能够根据业务需求推进功能上线，并保证稳定性。 面试的内容从三个方面考虑 考察方面主要有三个方面：技术、业务、态度。 如果候选人之前的工作经验刚好能够匹配公司的技术栈、业务场景、类似的组织架构沟通环境，就说明他能够很快能够融入团队，如果能够解决当前团队的技术难点，从工作能力的角度考虑，那肯定是最合适的人选。不过这种几率很小，目前还没遇到过，因为公司现在正在做技术化转型考虑，很多互联网的人员参与面试，对公司的业务场景和组织架构都不太熟悉，而对业务比较熟的，技术能力更偏向于传统的java开发流程，基础知识相对较弱。技术没问题的情况下现在看下来，上手估计要1个月，综合还是以技术能力的考察为重点。 关于态度方面，主要是明确候选人的期望和公司是否匹配，包括加班、福利、团队协作方式、工作（业务）内容。公司文化相关内容的传达也很重要，主要看对方工作背景，比如公司规模、开发流程是否相似、离职原因等方面，不太好量化，但双方要坦诚沟通，一般入职1个月不到就离职的基本都是这一块沟通出了问题：） 技术的考察按照当前主流的分类来看，有几个大的方面： 基础知识：计算机科学相关的知识是否扎实。疑难问题的解决方案需要基础知识作为保障，最基本的几块是：操作系统、基本的网络协议、数据结构和算法、数据库。包括如下几个部分： 操作系统考察进程、线程、内存模型、并发问题、IO、基本的shell命令 网络包括tcp/ip协议、tcp协议、http协议 基本数据结构和并发的数据访问问题，可以结合算法题目进行考察相关基本功 数据库的锁机制、事物和隔离级别、索引 相关领域的专业技能：编程语言（java）、框架（springboot/cloud）、前后端交互相关的http协议细节内容、分布式扩展能力和高可用方案（nginx、redis、eureka、DB） 沟通协调能力：问题的推进能力，沟通方式、描述问题的方式 管理能力（自我管理和团队管理）：开发进度和风险评估能力，如： 任务列表管理 milestone设定 工程能力：一般的招聘贴上都没有明确提到这一点，面试的时候基本是通过工作经验或者问一些工作环境推断的。可以结合候选人的工作背景，问一些日常的工作方式，高级技术人员需要理解当前工作中的技术架构和开发流程，难点和改进方式。能体现出候选人的技术栈广度和实际应用能力，如： 工具使用：Git实践、Maven打包、springboot的启动方式 开发流程、多个业务版本同时开发、灰度发布 JVM调优、SQL调优、GC log文件分析 对于业务部门来说最重要的部分是领域专业技能点是重点，web的专业技能也是最容易量化的部分，其他方面根据深度可以进行不同的评估，对于1年左右需要基础扎实；3年左右需要熟悉开发流程；5年需要具备一定的工程能力，解决技术难点；7年能够主动推进项目进展，解决内外部block的地方。 技术面试的内容需要考察验证 技术面试相对来说容易量化，但是简历包装、现场baidu面试题的情况也时有发生。在跟候选人交流时，要注意回答问题的流畅程度，问题是否能恰好达到候选人的技术瓶颈，当然这需要跟候选人有类似的工作经验和技术背景，才能有较好的把控。提问的方式及考察的内容，主要有： 80%的技术问题应该是明确的。不明确的问题不仅无法保证面试的质量，也会无故的浪费时间。除了可以考察候选人技术水平，还包括理解能力、沟通能力。 给定一个错误的背景，观察候选人是否可以发现问题。考察候选人的诚实度，是否会根据猜测、过多的凭感觉回答。 根据工作背景提问相关的细节。考察深入程度，引申相关问题，推断候选人在团队中的定位。 算法题目。适当的算法题可以过滤掉不少1年当3年用的程序员，考察候选人对技术的热情程度。 给定一个宽泛的业务场景，让候选人进行推演，比如：web页面上的一个按钮如何从点击到展示内容的。考察专业能力。 其他考察方面 以上准则在大多数情况下应该优先考虑，但不是绝对的，总会有一些对某些方面比较突出的候选人，一个健康的团队人员的技能分配应该是有层次的。这个层次有平级层次和深度层次。不同水平的人在一起，能让日常工作更容易分工协作，也有利于知识在团队的传播，更加自然的将技术传递下去。同一技术水平的人，在其他地方可以互补，提高团队的稳定性。所以有些技术之外的因素也可以加入评估标准中，包括： 沟通能力比较强、表述清晰 学习能力强，技术面比较广 某一技术点有自己独特的感悟 这些考察点需要面试官本人有较高的职业素养。 对求职者的建议 没人能在1小时的沟通中，决定别人是不是一个“合适”的人，但是在工作中，我们必须互相做出决定。有时候面试失利可能是跟面试官聊不到一块去，但是作为求职者，我们要在这1小时之内尽力表达自己，所以不要含蓄，对自己的要求、优点、缺点都可以尽力说出来。日常的积累也是很重要的，如果你有一份坚持了3年的技术博客、一个超过100个star的repo、在Stack Overflow上较高vote的问答帖子，我想没人会忽略这些隐含的亮点，主动说出来即可。 By LoranceChen，使用知识共享 署名-相同方式共享 4.0协议发布 皖ICP备2021006543号-1            此页面修订于： 2021-05-14 01:39:03 "},"chap01/1-1.html":{"url":"chap01/1-1.html","title":"1-1","keywords":"","body":"01 这是第一章第一节 hello gitbook By LoranceChen，使用知识共享 署名-相同方式共享 4.0协议发布 皖ICP备2021006543号-1            此页面修订于： 2021-05-14 01:39:03 "},"chap02/2-1.html":{"url":"chap02/2-1.html","title":"2-1","keywords":"","body":"chap02 By LoranceChen，使用知识共享 署名-相同方式共享 4.0协议发布 皖ICP备2021006543号-1            此页面修订于： 2021-05-14 01:39:03 "}}